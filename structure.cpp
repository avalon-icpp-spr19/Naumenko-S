#include <iostream>
#include <cmath>
#include "Extention.hpp"

using namespace std;
using namespace ext;

enum Color
{
	red,
	orange,
	yellow,
	green,
	lightblue,
	blue,
	violet
};
struct Date
{
	int day; 
	int month; 
	int year;
};
struct Point
{
	float x;
	float y;
};
struct Triangle
{
	int st[3];
	Color col;
};

int main()
{
	setlocale(LC_ALL, "rus");
	/*	Задание №1
	Создать структуру Point, содержащую два поля x, y типа float.
	Создать и проинициализировать переменную типа Point.
	Создать переменную типа Point и проинициализировать ее данными с клавиатуры.
	Вывести на экран значения x, y вышеобъявленных переменных.
	Написать программу, которая определеяет принадлежит ли заданная точка кругу заданного радиуса.
	Координаты точки и радиус пользователь вводит с клавиатуры.
	Для хранения координат точки использовать структуру Point.*/	
	Point koor;
	float rad;
	cout << "Введите координаты: ";
	cin >> koor.x >> koor.y;
	cout << "A (" << koor.x << "; " << koor.y << ")" << endl;
	cout << "Введите радиус круга: "; cin >> rad;
	if (koor.x*koor.x + koor.y*koor.y <+ rad*rad)
	{
		cout << "Точка принадрежит кругу" << endl;
	}
	else
	{
		cout << "Точка не принадрежит кругу" << endl;
	}
	/*Написать программу, которая по двум заданным точкам - концам отрезка находит точку середины отрезка.
	Координаты точек пользователь вводит с клавиатуры.
	Для хранения координат точек использовать структуру Point.
	Рассчитанную точку середины отрезка также хранить как структуру Point.
	Вывести координаты полученной точки в консоль.*/
	Point A, B, C;
	cout << "Введите координаты точки A: ";
	cin >> A.x >> A.y;
	cout << "Введите координаты точки B: ";
	cin >> B.x >> B.y;
	C.x = (B.x + A.x) / 2;
	C.y = (B.y + A.y) / 2;
	cout << "Середина отрезка: C (" << C.x << "; " << C.y << ")" << endl;

	/*Задание №2
	Создать структуру Circle, содержащую одно поле типа int - радиус и второе поле типа Point - центр окружности.
	Создать и проинициализировать переменную типа Circle.
	Создать переменную типа Circle и проинициализировать ее данными введенными с клавиатуры.
	Вывести на экран данные, сохраненные в вышеобъявленных переменных.
	Даны две переменные типа Circle.
	Написать программу, которая определяет пересекаются ли окружности,
	описанные данными переменными.*/



	/*Задание №3
	Создать перечисление (enum) Color, для хранения 7 цветов радуги.
	Создать структуру Triangle, содержащее поле типа Color
	и массив для хранения трех элементов типа int (длины сторон).
	Создать и проинициализировать переменную типа Triangle корректными данными.
	Вывести на экран данные, сохраненные в вышеобъявленной переменной.
	Значение поля Color вывести в текстовом виде. (использовать конструкцию switch).
	Рассчитать и вывести на экран периметр вышеобъявленного треугольника.*/

	/*Задание №4
	Создать массив из 20 элеметнов типа Point.
	Проинициализировать его точками со случайными значениями координат в пределах от 0 до 100.
	Выведите на экран координаты:
	- точки с наименьшей x координатой
	- двух точек, расстояние между которыми минимально.*/


	/*Задание №5
	Создать массив из 100 элементов типа Triangle.
	Проинициализировать его случайными значениями (длина стороны от 1 до 10).
	При инициализации проверять, что треугольник с такими длинами сторон может существовать.
	(Длина каждой стороны должна быть строго меньше длин суммы двух других сторон).*/
	Triangle arr[100];
	bool tr = false;
	for (int i = 0; i < 100; i++)
	{		
		while (!tr)
		{		
			arr[i].st[0] = GetRandomValue(1, 10);
			arr[i].st[1] = GetRandomValue(1, 10);
			arr[i].st[2] = GetRandomValue(1, 10);
			tr = (arr[i].st[0] + arr[i].st[1] > arr[i].st[2]) && (arr[i].st[1] + arr[i].st[2] > arr[i].st[0]) && 
				(arr[i].st[0] + arr[i].st[2] > arr[i].st[1]);
		}
	}	
	/*Обработать полученный массив треугольников и вывести на экран следующую информацию:
	- вывести на экран все треугольники, периметр которых превышает значение, введенное с клавиатуры.
	Если подходящих треугольников нет, вывести соответствующее сообщение.
	- количество треугольников каждого цвета*/	

	/*Задание №6
	Написать программу, которая проверяет правильность заданных значений даты.
	Дату хранить с использованием структуры.
	Тестовые данные				Ожидаемый результат
	1 1 1992					Дата корректна
	30 6 1992					Дата корректна
	31 7 1992					Дата коррентна
	31 9 1994					Дата некорректна
	32 1 1992					Дана некорректна
	1 13 1992					Дата некорректна
	29 2 1993					Дата некорректна
	29 2 2004					Дата корректна
	29 2 1900					Дата некоррентна
	29 2 2000					Дата корректна*/
	Date date;
	bool hight_year;
	cin >> date.day >> date.month >> date.year;
	hight_year = ((date.year % 400 == 0) || (date.year % 100 != 0 && date.year % 4 == 0));
	if (date.day < 32 && date.day > 0 && date.year > 0)
	{
		switch (date.month)
		{
		case 1:
		case 3:
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			cout << "Дата корретна" << endl;
			break;
		case 2:
			if ((date.day < 30 && hight_year) || (date.day < 29 && !hight_year)) 
			{
				cout << "Дата корретна" << endl;
			}
			else
			{
				cout << "Дата некорретна" << endl;
			}
			break;
		case 4:
		case 6:
		case 9:
		case 11:
			if (date.day < 31)
			{
				cout << "Дата корретна" << endl;
			}
			else
			{
				cout << "Дата некорретна" << endl;
			}
			break;
		default:
			cout << "Дата некорретна" << endl;
			break;
		}
	}
	else
	{
		cout << "Дата некорретна" << endl;
	}	
}